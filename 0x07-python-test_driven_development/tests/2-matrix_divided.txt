#2-matrix_divided

==============================
 HOW TO USE 2-matrix_divided
==============================

This module describes the function that divides a matrix

USAGE
=====

The function ``matrix_divided(matrix, div)`` returns a new matrix that
contains the result of the division of the matrix rounded to 2 decimal place


::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[1, 2, 3],[4, 5, 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

returns a new matrix

::

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]


With floating point numbers


::


	>>> matrix = [ [1,2.0,3], [4.456,5,6] ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.49, 1.67, 2.0]]


Dividing with floating point number


::

	>>> print(matrix_divided(matrix, 3.56))
	[[0.28, 0.56, 0.84], [1.25, 1.4, 1.69]]


EXCEPTIONS
==========

Elements of the matrix must be of integer/float types

::


	>>> matrix = [ [1,"kelvin",3], [4,5,6] ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		raise TypeError("matrix must be a matrix (list of lists) of "
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Each row of the matrix must be of the same size

::


	>>> matrix = [[1, 2.0, 3, 4], [4.456, 5, 6]]
	>>> print(matrix_divided(matrix, 3.56))
	Traceback (most recent call last):
		raise TypeError("Each row of the matrix must have the same size")
	TypeError: Each row of the matrix must have the same size


Div must be of int/float type

::


	>>> matrix = [[1, 2.0, 3], [4.456, 5, 6]]
	>>> print(matrix_divided(matrix, "3"))
	Traceback (most recent call last):
		raise TypeError("div must be a number")
	TypeError: div must be a number


Div can't be equal to zero

::

	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
		raise ZeroDivisionError("division by zero")
	ZeroDivisionError: division by zero

matrix can't be an empty list

::


	>>> matrix = []
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		raise TypeError("matrix must be a matrix (list of lists) of "
	TypeError: matrix must be a matrix (list of lists) of integers/floats
